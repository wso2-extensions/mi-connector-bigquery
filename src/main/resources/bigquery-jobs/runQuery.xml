<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!-- Method Documentation URL: https://cloud.google.com/bigquery/docs/reference/v2/jobs/query -->
<template name="runQuery" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="projectId" description="Project ID of the project billed for the query."/>
    <parameter name="kind" description="The resource type of the request."/>
    <parameter name="query"
               description="A query string, following the BigQuery query syntax, of the query to execute."/>
    <parameter name="maxResults"
               description="The maximum number of rows of data to return per page of results. Responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies."/>
    <parameter name="defaultDatasetId"
               description="A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters. "/>
    <parameter name="defaultProjectId"
               description="The ID of the project containing this dataset."/>
    <parameter name="timeoutMs"
               description="How long to wait for the query to complete, in milliseconds, before the request times out and returns. "/>
    <parameter name="dryRun"
               description="If set to true, BigQuery doesn't run the job. Instead, if the query is valid, BigQuery returns statistics about the job. If the query is invalid, an error returns. The default value is false."/>
    <parameter name="useQueryCache"
               description="Whether to look for the result in the query cache. The default value is true. "/>
    <parameter name="useLegacySql"
               description="Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL."/>
    <parameter name="responseVariable" description="Name of the variable to store operation output"/>
    <parameter name="overwriteBody" description="Replace Message Body with operation output"/>
    <sequence>
        <property name="uri.var.projectId" expression="$func:projectId"/>
        <property name="uri.var.kind" expression="$func:kind"/>
        <property name="uri.var.query" expression="$func:query"/>
        <property name="uri.var.maxResults" expression="$func:maxResults"/>
        <property name="uri.var.defaultDatasetId" expression="$func:defaultDatasetId"/>
        <property name="uri.var.defaultProjectId" expression="$func:defaultProjectId"/>
        <property name="uri.var.timeoutMs" expression="$func:timeoutMs"/>
        <property name="uri.var.dryRun" expression="$func:dryRun"/>
        <property name="uri.var.useQueryCache" expression="$func:useQueryCache"/>
        <property name="useLegacySql" expression="$func:useLegacySql"/>
        <payloadFactory media-type="json">
            <format>
                {
                "query": "$1",
                "defaultDataset":{
                "datasetId": "$2"
                }
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.query')"/>
                <arg expression="get-property('uri.var.defaultDatasetId')"/>
            </args>
        </payloadFactory>
        <script language="js">
            <![CDATA[
            var kind = mc.getProperty('uri.var.kind');
            var query = mc.getProperty('uri.var.query');
            var maxResults = mc.getProperty('uri.var.maxResults');
            var defaultProjectId = mc.getProperty('uri.var.defaultProjectId');
            var timeoutMs = mc.getProperty('uri.var.timeoutMs');
            var dryRun = mc.getProperty('uri.var.dryRun');
            var useQueryCache = mc.getProperty('uri.var.useQueryCache');
            var useLegacySql = mc.getProperty('useLegacySql');
            var jsonPayload = mc.getPayloadJSON();            
            var commonQueryParams = mc.getProperty('uri.var.commonQueryParams');
            var urlQuery = '';
            if (commonQueryParams != null && commonQueryParams != "") {
               urlQuery +=  commonQueryParams + '&';
            }
            if (kind != null && kind != "") {
               jsonPayload.kind = kind;
            }
            if (query != null && query != "") {
               jsonPayload.query = query;
            }           
            if (maxResults != null && maxResults != "") {
               jsonPayload.maxResults = maxResults;
            }
            if (defaultProjectId != null && defaultProjectId != ""){
               jsonPayload.defaultDataset.projectId = defaultProjectId;
            }           
            if (timeoutMs != null && timeoutMs != "") {
               jsonPayload.timeoutMs = timeoutMs;
            }
            if (dryRun != null && dryRun != "") {
               jsonPayload.dryRun = dryRun;
            }
            if (useQueryCache != null && useQueryCache != "") {
               jsonPayload.useQueryCache = useQueryCache;
            }
            if (useLegacySql != null && useLegacySql != "") {
               jsonPayload.useLegacySql = useLegacySql;
            }
            mc.setPayloadJSON(jsonPayload);
            // Add a leading '?' and remove the trailing '&'
            if (urlQuery != "") {
               urlQuery = '?' + urlQuery.toString().substring(0, urlQuery.toString().lastIndexOf("&"));
               mc.setProperty('uri.var.urlQuery', urlQuery);
            }
         ]]>
        </script>
        <call>
            <endpoint>
                <http method="post"
                      uri-template="{uri.var.apiUrl}/bigquery/v2/projects/{uri.var.projectId}/queries{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="Expires" action="remove" scope="transport"/>
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="Alt-Svc" action="remove" scope="transport"/>
        <header name="Alternate-Protocol" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
        <header name="X-Frame-Options" action="remove" scope="transport"/>
        <header name="X-XSS-Protection" action="remove" scope="transport"/>
        <header name="Pragma" action="remove" scope="transport"/>
        <header name="WWW-Authenticate" action="remove" scope="transport"/>
    </sequence>
</template>